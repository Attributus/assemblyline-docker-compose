version: '3.7'

services:
  # Dependancies
  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: "${FILESTORE_PASSWORD}"
    ports:
      - '9000:9000'
    command: server /data
    networks: [core]
    volumes:
    - ${FILESTORE_PATH}:/data
    restart: on-failure

#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.4.0
#    environment:
#      SERVER_NAME: localhost
#      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
#    depends_on:
#      - elasticsearch
#    healthcheck:
#      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      core: {}
#    restart: on-failure
#
#  apm_server:
#    image: sgaroncse/apm-server:7.3.0
#    environment:
#      ES_HOSTS: elasticsearch:9200
#    ports:
#      - '8200:8200'
#    depends_on:
#      - elasticsearch
#    networks:
#      core: {}
#    restart: on-failure

  elasticsearch:
#    container_name: elasticsearch
    image: sgaroncse/elasticsearch:7.4.0
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      DISCOVERY_TYPE: 'single-node'
      ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"
    ports:
      - '9200:9200'
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    networks: [core]
    volumes:
      - ${DATASTORE_PATH}:/usr/share/elasticsearch/data
    restart: on-failure

#  filebeat:
#    image: docker.elastic.co/beats/filebeat:7.3.0
#    user: root
#    volumes:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./config/filebeat.docker.yaml:/usr/share/filebeat/filebeat.yml:ro
#    command: filebeat -e -strict.perms=false
#    depends_on:
#      - elasticsearch
#    networks:
#      core: {}
#    restart: on-failure
#
#  metricbeat:
#    image: docker.elastic.co/beats/metricbeat:7.3.0
#    user: root
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./config/metricbeat.docker.yaml:/usr/share/metricbeat/metricbeat.yml:ro
#    command: metricbeat -e --strict.perms=false
#    depends_on:
#      - elasticsearch
#      - kibana
#    networks:
#      core: {}
#    restart: on-failure

  redis:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure
    networks: [core]

  redis-persist:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ${REDIS_PATH}:/var/opt/redislabs/
    restart: on-failure
    networks: [core]

  nginx:
    image: nginx:1.16
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ${COMPOSE_ROOT}/config/default.template:/etc/nginx/conf.d/default.conf
      - ${COMPOSE_ROOT}/config/nginx.crt:/etc/ssl/nginx.crt
      - ${COMPOSE_ROOT}/config/nginx.key:/etc/ssl/nginx.key
    command: /bin/bash -c "cat /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    networks:
      - core
      - external
    restart: on-failure


  # Start the core services
  # Alerter
  al_alerter:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.alerter.run_alerter

  # Expiry
  al_expiry:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.expiry.run_expiry

  # Metrics aggregator
  al_metrics:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_metrics_aggregator

  # Hearbeat manager
  al_heartbeat:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_heartbeat_manager

  # Workflow
  al_workflow:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.workflow.run_workflow

  # Watcher
  al_watcher:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.watcher.run_watcher

  al_scaler:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.scaler.run_scaler

  al_dispatcher_files:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.dispatching.run_files

  al_dispatcher_submissions:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.dispatching.run_submissions

  # Ingester Processes
  al_ingester_ingest:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_ingest

  al_ingester_internal:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_internal

  al_ingester_submit:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_submit

  # Service server
  al_service_server:
    image: cccs/assemblyline-service-server:${SERVICE_SERVER_VERSION}
    ports:
      - '5003:5003'
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks:
      - core
      - svc
    environment:
      - SERVICE_API_AUTH_KEY=${SERVICE_API_KEY}

  # UI
  al_ui:
    image: cccs/assemblyline-ui:${UI_VERSION}
    ports:
      - '5000:5000'
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    command: python3 -m assemblyline_ui.app
    networks: [core]

  # SocketIO Server
  al_socketio:
    image: cccs/assemblyline-socketio:${UI_VERSION}
    ports:
      - '5002:5002'
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    command: python3 -m assemblyline_ui.socketsrv
    networks: [core]

  # Bootstrap the assemblyline system by creating an admin user
  al_first_time_setup:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - ${COMPOSE_ROOT}/config/bootstrap.py:/tmp/bootstrap.py:ro
    command: python3 /tmp/bootstrap.py
    networks: [core]

  # APKaye service
  alsvc_apkaye:
    image: cccs/assemblyline-service-apkaye:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Characterize service
  alsvc_characterize:
    image: cccs/assemblyline-service-characterize:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Cleaver service
  alsvc_cleaver:
    image: cccs/alsvc_cleaver:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # ConfigDecoder service
#  alsvc_configdecoder:
#    image: cccs/alsvc_configdecoder:latest
#    environment:
#      - SERVICE_API_HOST=http://al_service_server:5003
#        E_API_AUTH_KEY=ThisIsARandomAuthKey...ChangeMe!
#      networks: [svc]

  # Espresso service
  alsvc_espresso:
    image: cccs/alsvc_espresso:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Extract service
  alsvc_extract:
    image: cccs/assemblyline-service-extract:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # FrankenStrings service
  alsvc_frankenstrings:
    image: cccs/alsvc_frankenstrings:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # IPArse service
  alsvc_iparse:
    image: cccs/alsvc_iparse:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # MetaPeek service
  alsvc_metapeek:
    image: cccs/assemblyline-service-metapeek:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Oletools service
#  alsvc_oletools:
#    image: cccs/alsvc_oletools:latest
#    environment:
#      - SERVICE_API_HOST=http://al_service_server:5003
#        E_API_AUTH_KEY=ThisIsARandomAuthKey...ChangeMe!
#      networks: [svc]

  # PDFId service
  alsvc_pdfid:
    image: cccs/alsvc_pdfid:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # PeePDF service
  alsvc_peepdf:
    image: cccs/alsvc_peepdf:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # PEFile service
  alsvc_pefile:
    image: cccs/alsvc_pefile:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Pixaxe service
  alsvc_pixaxe:
    image: cccs/alsvc_pixaxe:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Swiffer service
  alsvc_swiffer:
    image: cccs/alsvc_swiffer:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # TagCheck service
#  alsvc_tagcheck:
#    image: cccs/alsvc_tagcheck:latest
#    environment:
#      - SERVICE_API_HOST=http://al_service_server:5003
#        E_API_AUTH_KEY=ThisIsARandomAuthKey...ChangeMe!
#      networks: [svc]

  # TorrentSlicer service
  alsvc_torrentslicer:
    image: cccs/alsvc_torrentslicer:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Unpacker service
  alsvc_unpacker:
    image: cccs/alsvc_unpacker:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]

  # Yara service
  alsvc_yara:
    image: cccs/alsvc_yara:latest
    environment:
      - SERVICE_API_HOST=http://al_service_server:5003
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    networks: [svc]


networks:
  core:
    internal: true
  external:
    internal: false
  svc:
    name: svc
    internal: true