version: '3.7'

services:
  # Dependancies
  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
    ports:
      - '9000:9000'
    command: server /data
    volumes:
    - filestore:/data
    networks:
      core-network: {}
    restart: on-failure

  kibana:
    image: docker.elastic.co/kibana/kibana:7.3.0
    environment:
      SERVER_NAME: localhost
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      core-network: {}
    restart: on-failure

  apm_server:
    image: sgaroncse/apm-server:7.3.0
    environment:
      ES_HOSTS: elasticsearch:9200
    ports:
      - '8200:8200'
    depends_on:
      - elasticsearch
    networks:
      core-network: {}
    restart: on-failure

  elasticsearch:
    image: sgaroncse/elasticsearch:7.3.0
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      DISCOVERY_TYPE: 'single-node'
    ports:
      - '9200:9200'
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    volumes:
      - datastore:/usr/share/elasticsearch/data
    networks:
      core-network: {}
    restart: on-failure

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.3.0
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/filebeat.docker.yaml:/usr/share/filebeat/filebeat.yml:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      - elasticsearch
    networks:
      core-network: {}
    restart: on-failure

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.3.0
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/metricbeat.docker.yaml:/usr/share/metricbeat/metricbeat.yml:ro
    command: metricbeat -e --strict.perms=false
    depends_on:
      - elasticsearch
      - kibana
    networks:
      core-network: {}
    restart: on-failure

  redis:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      core-network: {}
    restart: on-failure

  redis-persist:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - redis:/var/opt/redislabs/
    networks:
      core-network: {}
    restart: on-failure

  nginx:
    image: sgaroncse/nginx-ssl-dev:1.15.10-2
    ports:
      - '80:80'
      - '443:443'
    environment:
      - UI_HOST=172.17.0.1
      - FQDN=localhost
      - MAX_BODY_SIZE=100M
    command: /bin/bash -c "envsubst < /tmp/default.template > /etc/nginx/conf.d/default.conf && cat /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - kibana
    networks:
      core-network: {}
    restart: on-failure

  # Start the core services

  # Alerter
  al_alerter:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.alerter.run_alerter

  # Expiry
  al_expiry:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.expiry.run_expiry

  # Metrics aggregator
  al_metrics:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_metrics_aggregator

  # Hearbeat manager
  al_heartbeat:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_heartbeat_manager

  # Workflow
  al_workflow:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.workflow.run_workflow

  # Watcher
  al_watcher:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.watcher.run_watcher

  al_scaler:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.scaler.run_scaler

  # Ingester Processes
  al_ingester_ingest:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_ingest

  al_ingester_internal:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_internal

  al_ingester_submit:
    image: cccs/assemblyline-core:${CORE_VERSION}
    volumes:
      - ./config/config.yaml:/etc/assemblyline/config.yaml:ro
    networks: [core-network]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_submit


#  # Service server
#  al_service_server:
#    image: cccs/assemblyline-service-server:${SERVICE_SERVER_VERSION}
#    ports:
#      - '5003:5003'
#    volumes:
#      - /opt/alv4/alv4/dev/core/config/:/etc/assemblyline/
#    networks:
#      - core-network
#      - service-network

  # Create test data
#  create_test_data:
#    image: cccs/assemblyline-core:${CORE_VERSION}
#    volumes:
#      - /opt/alv4/alv4/dev/core/config/:/etc/assemblyline/
#      - /opt/alv4/:/opt/alv4/
#    working_dir: /opt/alv4/alv4/assemblyline/odm/random_data/
#    command: python3 create_test_data.py nosvc

  # UI
#  al_ui:
#    image: cccs/assemblyline_dev:4.0.8
#    ports:
#      - '5000:5000'
#    volumes:
#      - /opt/alv4/alv4/dev/core/config/:/etc/assemblyline/
#      - /opt/alv4/:/opt/alv4/
#    command: python3 -m assemblyline_ui.app
#
#  # SocketIO Server
#  al_socketio:
#    image: cccs/assemblyline_dev:4.0.8
#    ports:
#      - '5002:5002'
#    volumes:
#      - /opt/alv4/alv4/dev/core/config/:/etc/assemblyline/
#      - /opt/alv4/:/opt/alv4/
#    working_dir: /opt/alv4/alv4_ui/assemblyline_ui/
#    command: python3 socketsrv.py



networks:
  core-network:
    name: core-network
    internal: true


volumes:
  datastore:
  filestore:
  redis:
